// Main Styles

// See the other SASS partials for typography, variables etc.
// CSS Grid is used for the layout with fallbacks for less capable browsers
// declared beforehand, and a @supports feature query to reset fallbacks when
// necessary. https://rachelandrew.co.uk/css/cheatsheets/grid-fallbacks

body {
  height: 100vh;
  display: grid;
  grid-template-rows: auto 1fr auto;
  min-height: 100vh;
  @include var(background-color, color__primary--ll);
  grid-template-columns:
    [full-start] minmax(1.5rem, 1fr) [main-start] minmax(0, 50rem) [main-end] minmax(1.5rem, 1fr) [full-end];
}

// header, the first grid row
// it is also a grid for the logo and nav
header {
  grid-column: main;
  padding: 2em 0;

  @media screen and (min-width: $screen-xs-min) {
    display: grid;
    grid-template-columns: auto 1fr;
    padding: 1rem 0;
  }
}

// logo, is a grid item
.site-title {
  grid-column: 1/2;
  display: inline-block;
  padding: 0;
  font-size: 1.5em;
  line-height: 1.3;
  letter-spacing: 0;
  font-weight: 400;

  a,
  a:visited {
    text-decoration: none;
    border: 0;
    font-family: $font__secondary;
    @include var(color, color__text);
  }

  a:hover {
    @include var(color, color__text);
  }
}

// main menu, is a grid item
header>nav {
  grid-column: 2/3;
  padding-top: .5em;

  @media screen and (min-width: $screen-xs-min) {
    float: right;
    justify-self: end;
    padding-top: 0;
  }

  ul {
    display: flex;

    @media screen and (min-width: $screen-xs-min) {
      justify-content: flex-end;
      height: 100%;
      display: flex;
      align-items: center;
    }

    li {
      display: inline-block;

      +li a {
        margin-left: 2em;
      }

      @media screen and (min-width: $screen-xs-min) {
        margin-right: 0;
      }

      a,
      a:visited {
        @include var(color, color__text);
        text-decoration: none;
        border: 0;

        @media screen and (min-width: $screen-xs-min) {
          padding: .25rem;
        }

        &[data-current="current page"] {
          // you can add an active nav item style here
        }
      }

      a:hover {
        // color: $color__link;
        @include var(color, color__link);
      }
    }
  }
}

// our main content wrapper, the width scales with font size

main {
  width: 100%;
  padding-top: 4rem;
  padding-bottom: 4rem;

  @media screen and (min-width: $screen-md-min) {
    align-content: start;
  }
}

.main--full {
  grid-column: full;
  display: grid;
  grid-template-columns: [full-start] minmax(1.5rem, 1fr) [main-start] minmax(0, 52rem) [main-end] minmax(1.5rem, 1fr) [full-end];
  max-width: 52rem;
  margin-right: auto;
  margin-left: auto;
}

.main--container {
  grid-column: main;
}

.main--full .main__content {
  grid-column: main;
}

article {
  grid-column: main;
}

// reset breaking fallbacks (e.g. widths) if CSS Grid is supported
// float, inline-block, table properties are already ignored by CSS Grid
@supports (display: grid) {
  main {
    // width: 100%;
    max-width: none;
  }
}

// blog posts list
html[data-current="blog"] main>section {
  ul li {
    padding: 2rem 0;
    border-bottom: 0.05em solid;
    @include var(border-bottom-color, color__hairline);

    p {
      padding-bottom: 0;
    }
  }
}

// adjacent blog posts links
nav[aria-label="Adjacent Posts"] {
  padding: 4rem 0;

  ul {
    display: flex;

    li {
      flex: 0 0 50%;
      width: auto;

      &:nth-child(2) {
        text-align: right;
      }
    }
  }
}

// contact form
html[data-current="contact"] main>form {
  display: grid;

  label {
    display: none;
  }

  input,
  textarea {
    width: 100%;
    padding: 1rem;
    margin-bottom: 2rem;
  }

  button {
    width: 100%;
  }
}

// reset CSS Grid fallbacks when they aren't required
@supports (display: grid) {
  html[data-current="contact"] main>form {

    input,
    textarea,
    button {
      width: auto;
      max-width: none;
    }
  }
}

footer {
  grid-column: full;
  display: grid;
  grid-template-columns:
    [full-start] minmax(1.5rem, 1fr) [main-start] minmax(0, 50rem) [main-end] minmax(1.5rem, 1fr) [full-end];
  padding: 2em 0;

  >small {
    grid-column: main;
  }
}
